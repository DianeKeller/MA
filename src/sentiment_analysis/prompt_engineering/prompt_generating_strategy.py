"""
prompt_generating_strategy.py
-----------------------------
Version 1.0, updated on 2025-05-01

"""

from abc import ABC, abstractmethod
from typing import List, Dict, Tuple

from src.logging_mixin import LoggingMixin


class PromptGeneratingStrategy(
    ABC,
    LoggingMixin,
):
    """
    PromptGeneratingStrategy class.

    Base class for PromptGeneratingStrategy subclasses.

    Class for handling the assembly of the parts of a single prompt based on
    selected prompt ingredients, thus generating a prompt.

    Notes
    -----
    In this program, a 'prompt' refers to a dictionary containing prompt
    components used to construct specific 'queries' for given samples. In
    contrast, a 'query' is the text generated by combining a prompt's
    components with a sample's text and relevant details, forming the
    payload sent to an API.


    Attributes
    ----------
    answer_before_mention : str
        The "answer_before_mention" part of the prompt.

    answer_start : str
        The "answer_start" part of the prompt.

    before_mention : str
        The "before_mention" part of the prompt.

    before_sentence : str
        The "before_sentence" part of the prompt.

    prompt_part_categories : List[str]
        The prompt part categories used to build queries.

    prompt_parts : Dict[str, str]
        Assembles the prompt parts of a single prompt.

    question : str
        The "question" part of the prompt.

    scale : str
        The "scale" part of the prompt.

    selected_ingredients : Dict[str, str]
        The selected prompt ingredients from which to compose prompt parts.


    Methods
    -------
    generate_prompt() -> Dict[str, str]:
        Assembles and returns the prompt parts of a single prompt.

    """

    ING = ('ingredient')
    STR = ('string')
    CMD = ('command')

    def __init__(self, selected_ingredients: Dict[str, str]):
        """
        Constructor.

        Initializes the PromptParts class with the given selected ingredients.

        Parameters
        ----------
        selected_ingredients : Dict[str, str]
            A dictionary where the keys correspond to ingredients categories
            and the values to selected ingredients values.

        """

        self._selected_ingredients = selected_ingredients
        self._patterns: Dict[str, List[Tuple[str, str]]] = {}

    @property
    def selected_ingredients(self) \
            -> Dict[str, str]:
        """
        Returns the selected prompt ingredients.

        Returns the selected prompt ingredients from which to compose prompt
        parts.

        Returns
        -------
        Dict[str, str]
            A dictionary where the keys correspond to ingredients categories
            and the values to selected ingredients values.

        """

        return self._selected_ingredients

    # region --- Properties

    # endregion --- Properties

    # region --- Public Methods
    @abstractmethod
    def generate_prompt(self) \
            -> Dict[str, str]:
        """
        Assembles an returns the prompt parts of a single prompt.

        Abstract method that needs to be implemented by the subclasses.

        Returns
        -------
        Dict[str, str]
            Dictionary of prompt parts representing a single prompt. The
            keys in the dictionary are the prompt part categories and the
            values are the alternative values the prompt part categories can
            have.

        Raises
        ------
        NotImplementedError
            If the concrete stategy does not implement this abstract method.

        """

        raise NotImplementedError

    @abstractmethod
    def define_prompt_part_generation_patterns(self):
        """
        Defines the prompt part generation patterns.

        Abstract method that needs to be implemented by the subclasses.

        Raises
        ------
        NotImplementedError
            If the concrete stategy does not implement this abstract method.

        """

        raise NotImplementedError

    def get_prompt_part_generation_pattern(self, category: str) \
            -> List[Tuple[str, str]]:
        self.define_prompt_part_generation_patterns()

        return self._patterns[category]

        # endregion --- Public Methods

    # region --- Protected Methods

    # endregion --- Protected Methods
