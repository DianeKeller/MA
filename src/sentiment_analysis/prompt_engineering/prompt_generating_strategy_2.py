"""
prompt_generating_strategy_2.py
-------------------------------
Version 1.0, updated on 2025-05-01

"""

from typing import List, Dict

from src.sentiment_analysis.prompt_engineering.prompt_generating_strategy \
    import PromptGeneratingStrategy


class PromptGeneratingStrategy2(PromptGeneratingStrategy):
    """
    PromptGeneratingStrategy2 class.

    This class implements the PromptGeneratingStrategy interface, defining
    and applying strategy-specific rules for the composition of single
    prompts. It assembles the parts of a single prompt from selected prompt
    ingredients based on the defined rules and and thus generates a prompt.

    Notes
    -----
    In this program, a 'prompt' refers to a dictionary containing prompt
    components used to construct specific 'queries' for given samples. In
    contrast, a 'query' is the text generated by combining a prompt's
    components with a sample's text and relevant details, forming the
    payload sent to an API.


    Attributes
    ----------
    answer_before_mention : str
        The "answer_before_mention" part of the prompt.

    answer_start : str
        The "answer_start" part of the prompt.

    before_mention : str
        The "before_mention" part of the prompt.

    before_sentence : str
        The "before_sentence" part of the prompt.

    prompt_part_categories : List[str]
        The prompt part categories used to build queries.

    prompt_parts : Dict[str, str]
        Assembles the prompt parts of a single prompt.

    question : str
        The "question" part of the prompt.

    scale : str
        The "scale" part of the prompt.

    selected_ingredients : Dict[str, str]
        The selected prompt ingredients from which to compose prompt parts.


    Methods
    -------
    generate_prompt() -> Dict[str, str]:
        Assembles and returns the prompt parts of a single prompt.

    """

    def __init__(self, selected_ingredients: Dict[str, str]):
        """
        Constructor.

        Initializes the PromptParts class with the given selected ingredients.

        Parameters
        ----------
        selected_ingredients : Dict[str, str]
            A dictionary where the keys correspond to ingredients categories
            and the values to selected ingredients values.

        """

        super().__init__(selected_ingredients)

    @property
    def selected_ingredients(self) \
            -> Dict[str, str]:
        """
        Returns the selected prompt ingredients.

        Returns the selected prompt ingredients from which to compose prompt
        parts.

        Returns
        -------
        Dict[str, str]
            A dictionary where the keys correspond to ingredients categories
            and the values to selected ingredients values.

        """

        return self._selected_ingredients

    @property
    def thought(self) \
            -> str:
        _dict = self.selected_ingredients

        thought = (
            _dict['thought']
        )
        return thought

    @property
    def before_sentence(self):
        """
        Returns the "before_sentence" part of the prompt.

        Composes the "before_sentence" part of the prompt using the needed
        ingredients from the selected_ingredients dictionary and returns the
        resulting string.

        Returns
        -------
        str
            The composed string for the before_sentence position in the
            current prompt.

        """

        _dict = self.selected_ingredients

        before_sentence = (
                _dict['politeness'] +
                _dict['task'] +
                _dict['what'] +
                _dict['toward'] +
                _dict['given'] +
                _dict['target'] +
                _dict['preposition'] +
                _dict['given'] +
                _dict['where'] + ". \n" +
                _dict['sentence_label'] +
                (
                    _dict['where'].rstrip().capitalize()
                    if _dict['sentence_label'] == ""
                    else _dict['where'].rstrip()
                ) + ': '
        )

        return before_sentence

    @property
    def before_mention(self) \
            -> str:
        """
        Returns the "before_mention" part of the prompt.

        Composes the "before_mention" part of the prompt using the needed
        ingredients from the selected_ingredients dictionary and returns the
        resulting string.

        Returns
        -------
        str
            The composed string for the "before_mention" position in the
            current prompt.

        """

        _dict = self.selected_ingredients

        before_mention = (
                "\n" +
                _dict['target'].capitalize() +
                ": "
        )

        return before_mention

    @property
    def scale(self) \
            -> str:
        """
        Returns the "scale" part of the prompt.

        Composes the "scale" part of the prompt using the needed
        ingredients from the selected_ingredients dictionary and returns the
        resulting string.

        Returns
        -------
        str
            The composed string for the "scale" position in the
            current prompt.

        """

        _dict = self.selected_ingredients
        what = _dict['what']

        scale = _dict['scale'].replace(
            '{what}', what.strip().replace(
                'the ', ''
            )
        )

        return scale

    @property
    def instruction(self) \
            -> str:
        _dict = self.selected_ingredients

        instruction = (
            _dict['sentiment_introduction']
        )

        return instruction


    @property
    def question(self) \
            -> str:
        """
        Returns the "question" part of the prompt.

        Composes the "question" part of the prompt using the needed
        ingredients from the selected_ingredients dictionary and returns the
        resulting string.

        Returns
        -------
        str
            The composed string for the "question" position in the
            current prompt.

        """

        _dict = self.selected_ingredients

        question = (
                "what is " +
                _dict['what'] +
                _dict['toward'] +
                _dict['given'] +
                _dict['target'] + "?"
        )

        return question

    @property
    def answer_before_mention(self) \
            -> str:
        """
        Returns the "answer_before_mention" part of the prompt.

        Composes the "answer_before_mention" part of the prompt using the
        needed ingredients from the selected_ingredients dictionary and
        returns the resulting string.

        Returns
        -------
        str
            The composed string for the "answer_before_mention" position in the
            current prompt.

        """

        _dict = self.selected_ingredients

        answer_before_mention = (
                "\nYour answer: " +
                _dict['thought'] +
                _dict['what'] +
                _dict['toward']
        )

        return answer_before_mention

    @property
    def answer_start(self) \
            -> str:
        """
        Returns the "answer_start" part of the prompt.

        Composes the "answer_start" part of the prompt using the
        needed ingredients from the selected_ingredients dictionary and
        returns the resulting string.

        Returns
        -------
        str
            The composed string for the "answer_start" position in the
            current prompt.

        """

        _dict = self.selected_ingredients

        answer_start = _dict['answer_start']

        return answer_start

    @property
    def prompt_part_categories(self) \
            -> List[str]:
        """
        Returns the prompt part categories used to build queries.

        Returns
        -------
        List[str]
            List of prompt part categories.

        Notes
        -----
        This property has no setter.

        """

        return [
            'before_sentence',
            'before_mention',
            'scale',
            'question',
            'answer_before_mention',
            'answer_start'
        ]

    # region --- Properties

    # endregion --- Properties

    # region --- Public Methods
    def generate_prompt(self) \
            -> Dict[str, str]:
        """
        Assembles an returns the prompt parts of a single prompt.

        This method implements the corresponding abstract method of the
        PromptGenerationStrategy interface.

        """

        parts = {
            'before_sentence':
                self.before_sentence,
            'before_mention':
                self.before_mention,
            'scale': self.scale,
            'answer_before_mention': self.answer_before_mention,
            'answer_start': self.answer_start,
            'instruction': self.instruction,
            'question': self.question

        }

        return parts

    # endregion --- Public Methods

    # region --- Protected Methods

    # endregion --- Protected Methods
