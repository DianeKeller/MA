"""
prompt_generator.py
---------------
Version 1.0, updated on 2025-05-01

"""

from typing import Dict, Tuple, List

from logger import Logger
from src.logging_mixin import LoggingMixin
from src.sentiment_analysis.prompt_engineering.prompt_generating_strategy \
    import PromptGeneratingStrategy
from src.sentiment_analysis.prompt_engineering.prompt_generating_strategy_1 \
    import PromptGeneratingStrategy1


class PromptGenerator(LoggingMixin):
    """
    PromptGenerator class.

    This class serves as the context in a strategy pattern, which allows you to
    dynamically choose a prompt generating strategy at runtime.

    The class works with any of the prompt generating strategies that
    implement the PromptGeneratingStrategy interface. It gives access to the
    prompt generating methods of the given prompt generating strategy,
    which assemble the parts of a single prompt based on selected prompt
    ingredients and thus generate a prompt.

    Notes
    -----
    In this program, a 'prompt' refers to a dictionary containing prompt
    components used to construct specific 'queries' for given samples. In
    contrast, a 'query' is the text generated by combining a prompt's
    components with a sample's text and relevant details, forming the
    payload sent to an API.


    Attributes
    ----------
    answer_before_mention : str
        The "answer_before_mention" part of the prompt.

    answer_start : str
        The "answer_start" part of the prompt.

    before_mention : str
        The "before_mention" part of the prompt.

    before_sentence : str
        The "before_sentence" part of the prompt.

    prompt_part_categories : List[str]
        The prompt part categories used to build queries.

    prompt_parts : Dict[str, str]
        Assembles the prompt parts of a single prompt.

    question : str
        The "question" part of the prompt.

    scale : str
        The "scale" part of the prompt.

    selected_ingredients : Dict[str, str]
        The selected prompt ingredients from which to compose prompt parts.


    Methods
    -------
    generate_prompt() -> Dict[str, str]:
        Assembles and returns the prompt parts of a single prompt.

    """

    def __init__(
            self,
            my_strategy: PromptGeneratingStrategy | None = None
    ) -> None:
        """
        Constructor.

        Sets the prompt generating strategy which is supposed to be used for
        generating a prompt. If no strategy is specified when the
        PromptGenerator is called, a default prompt generating strategy is
        used.

        Parameters
        ----------
        my_strategy : PromptGeneratingStrategy | None
            The prompt generating strategy to be used. Default value: None.

        """

        # Override the default logger of the 'LoggingMixin' class.
        self.logger: Logger = Logger(self.__class__.__name__).get_logger()

        self._strategy = my_strategy or self.default_strategy()

    # region --- Properties

    @property
    def strategy(self) -> PromptGeneratingStrategy:
        """
        Gets the current prompt generating strategy.

        Returns
        -------
        PromptGeneratingStrategy
            The prompt generating strategy currently in use.

        """

        return self._strategy

    @strategy.setter
    def strategy(self, strategy: PromptGeneratingStrategy) \
            -> None:
        """
        Sets the prompt generating strategy to be used.

        The strategy can be changed at runtime.

        Parameters
        ----------
        strategy : PromptGeneratingStrategy
            The strategy to be used for the generation of a prompt.

        """

        self._strategy = strategy

    # endregion --- Properties

    # region --- Public Methods

    def generate_prompt(self) \
            -> Dict[str, str]:
        """
        Assembles an returns the prompt parts of a single prompt.
        """

        return self.strategy.generate_prompt()

    def get_prompt_part_generation_pattern(self, category: str) \
            -> List[Tuple[str, str]]:
        """
        Decomposes a prompt part into its basic ingredients.

        Parameters
        ----------
        category : str
            The category of the prompt part to be decomposed.

        prompt_part : str
            The prompt part to be decomposed.

        Returns
        -------
        List[Tuple[str, str]]


        """

        return self.strategy.get_prompt_part_generation_pattern(category)


    # endregion --- Public Methods

    # region --- Static Methods

    @staticmethod
    def default_strategy() \
            -> PromptGeneratingStrategy:
        """
        Returns the default prompt engineering strategy.

        As default, PromptEngineeringStrategy1 is used.

        Returns
        -------
        PromptGeneratingStrategy
            The PromptEngineeringStrategy1.

        Notes
        -----
        This method is used instead of a class constant to ensure lazy
        instantiation. This approach avoids the overhead of creating a default
        strategy object until it is actually needed.

        """

        return PromptGeneratingStrategy1(None)
