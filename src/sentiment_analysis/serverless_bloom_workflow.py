"""
serverless_bloom_workflow.py
----------------------------
Version 1.0, updated on 2025-01-10

"""

from typing import List

from src.logging_mixin import LoggingMixin
from src.sentiment_analysis.evaluation.evaluation_workflow import (
    EvaluationWorkflow
)
from src.sentiment_analysis.evaluation.optimization_workflow import (
    OptimizationWorkflow
)
from src.sentiment_analysis.prompt_engineering.prompt_engineer_factory \
    import get_prompt_engineer
from src.sentiment_analysis.sentiment_analysis_config import (
    SentimentAnalysisConfig
)
from src.sentiment_analysis.serverless_bloom import ServerlessBloom
from src.utils.data_utils import is_none_or_empty


class ServerlessBloomWorkflow(LoggingMixin):
    """
    ServerlessBloomWorkflow class.

    This class orchestrates operations related to sentiment analysis,
    prompt engineering, evaluation and optimization using serverless BLOOM.

    Attributes
    ----------
    config : SentimentAnalysisConfig
        Configuration settings for the sentiment analysis workflow.

    llm : ServerlessBloom
        The language model instance used for sentiment analysis.

    Methods
    -------
    execute() -> None:
        Defines and runs the operations the serverless Bloom workflow needs to
        execute.

    run_evaluation(strategy_nr: int, language: str | None = None) -> None:
        Evaluate the sentiment analysis for the specified language.

    run_prompt_engineering(strategy_nr: int) -> None:
        Runs prompt engineering for the specified prompt engineering strategy.

    run_prompt_optimization(strategy_nr: int, language: str = 'en') -> None:
        Runs prompt optimization for the specified strategy and language.

    run_sentiment_analysis( strategy_nr: int, language: str | None = None)
            -> None:
        Runs sentiment analysis for a specified language or for all languages.

    """

    def __init__(self):
        """
        Initializes the workflow with default configuration and model setup.

        """

        self.config = SentimentAnalysisConfig(
            batch_size=99,
            n_batches=1,
            chunk_size=15,
            version='01',
            data_offset=1,
            balanced=True,
            balance=33,
            n_best_prompts=5,
            target_n_prompts=150,
            with_validation=True
        )

        # Initialize the ServerlessBloom class
        self.llm = ServerlessBloom()

    # region --- Properties

    # endregion --- Properties

    # region --- Public Methods
    def run_prompt_engineering(self, strategy_nr: int) \
            -> None:
        """
        Runs prompt engineering for the specified prompt engineering strategy.

        Parameters
        ----------
        strategy_nr : int
            Number of the prompt engineering strategy to use.

        """

        # Update the config with the settings needed for the specific task
        self.config.update(
            version=str(strategy_nr).zfill(2),
            batch_size=3,
            data_offset=0,
            balanced=False
        )
        self._prompt_engineering(strategy_nr)

    def run_prompt_optimization(self, strategy_nr: int, language: str = 'en') \
            -> None:
        """
        Runs prompt optimization for the specified strategy and language.

        Parameters
        ----------
        strategy_nr : int
            Number of the prompt engineering strategy to use.

        language : str
            The language of samples to use to optimize the prompt engineering
            strategy.

        """
        # Update the config with the settings needed for the specific task
        self.config.update(
            version=str(strategy_nr).zfill(2),
            batch_size=99,
            chunk_size=15,
            data_offset=1,
            balanced=True
        )

        self._prompt_optimization(strategy_nr, language)

    def run_sentiment_analysis(
            self,
            strategy_nr: int,
            language: str | None = None
    ) -> None:
        """
        Runs sentiment analysis for a specified language or for all languages.

        Runs sentiment analysis for the specified language or for all
        languages using the prompts generated by the specified prompt
        engineering strategy.

        Parameters
        ----------
        strategy_nr : int
            Number of the prompt engineering strategy whose prompts to use.

        language : str | None
            The language of samples to use in sentiment analysis. Defaults to
            None, meaning that the sentiment analysis is performed for all
            languages.

        """

        # Update the config with the settings needed for the specific task
        version = str(strategy_nr).zfill(2)

        if is_none_or_empty(language):
            # This branch is for sentiment analysis for all languages once
            # prompt engineering and optimization are complete. The data
            # offset is set to 101 to skip the samples that were used for
            # prompt engineering and optimization.
            self.config.update(
                version=version,
                batch_size=99,
                data_offset=101,
                balanced=True
            )

            self._sentiment_analysis_for_all_languages(strategy_nr)

        else:
            # This branch is for sentiment analysis for a single language in
            # the context of prompt engineering and optimization. The data
            # offset is set to 1 to skip the sample that was used for
            # pre-validating the prompts.
            self.config.update(
                version=version,
                batch_size=99,
                data_offset=1,
                balanced=True
            )

            self._sentiment_analysis(strategy_nr, language)

    def run_evaluation(self, strategy_nr: int, language: str | None = None) \
            -> None:
        """
        Evaluate the sentiment analysis for the specified language.

        Evaluates the sentiment analysis performed for the specified language
        with the prompts generated by the specified prompt engineering
        strategy.

        Parameters
        ----------
        strategy_nr : int
            Number of the prompt engineering strategy whose prompts were used
            for the sentiment analysis.

        language : str | None
            The language of the samples for which to evaluate sentiment
            analysis results. Defaults to None, meaning that the sentiment
            analysis was performed for all languages and needs to be
            evaluated across all languages.

        """

        # Update the config with the settings needed for the specific task
        version = str(strategy_nr).zfill(2)

        if is_none_or_empty(language):

            self.config.update(
                version=version,
                batch_size=99,
                chunk_size=15,
                data_offset=101,
                balanced=True,
                target_n_prompts=1
            )

            self._sentiment_analysis_for_all_languages(strategy_nr)

        else:

            self.config.update(
                version=version,
                batch_size=99,
                chunk_size=15,
                data_offset=1,
                balanced=True
            )

            self._language_evaluation(strategy_nr, 'en')

    def run_prompt_group_evaluation(
            self,
            strategy_nr: int,
            prompt_group: List[int],
            language: str | None = 'en',
    ) -> None:

        # Update the config with the settings needed for the specific task
        version = str(strategy_nr).zfill(2)

        self.config.update(
            version=version,
            batch_size=99,
            chunk_size=15,
            data_offset=1,
            balanced=True
        )

        self._prompt_group_evaluation(strategy_nr, prompt_group, language)

    def execute(self) \
            -> None:
        """
        Defines and runs the operations the serverless Bloom workflow needs to
        execute.

        """

        self._prompt_engineering(1)

    # endregion --- Public Methods

    # region --- Protected Methods

    def _prompt_engineering(self, strategy_nr: int) \
            -> None:
        """
        Performs prompt engineering using the specified strategy.

        Parameters
        ----------
        strategy_nr : int
            The number of the prompt engineering strategy to use.

        """

        prompt_engineer = get_prompt_engineer(strategy_nr)
        all_variants = prompt_engineer.get_prompts()

    def _sentiment_analysis(
            self,
            strategy_nr: int = 1,
            language: str = 'en'
    ) -> None:
        """
        Performs sentiment analysis for the specified language.

        Performs sentiment analysis for the specified language. using the
        PromptEngineeringStrategy1.

        Parameters
        ----------
        strategy_nr : int
            The number of the prompt engineering strategy to use.

        language : str
            The language for which to perform the sentiment analysis.

        Notes
        -----
        This method does not return the retrieved data. The retrieval
        results are instead saved on disk during the retrieval process.

        """

        self.llm.predict_sentiments_in_language(language)

    def _sentiment_analysis_for_all_languages(
            self,
            strategy_nr: int = 2
    ) -> None:
        """
        Performs sentiment analysis for all supported languages.

        Performs sentiment analysis for all supported languages. using the
        PromptEngineeringStrategy1.

        Parameters
        ----------
        strategy_nr : int
            The number of the prompt engineering strategy to use.

        Notes
        -----
        This method does not return the retrieved data. The retrieval
        results are instead saved on disk during the retrieval process.

        """

        self.llm.predict_sentiments()

    def _language_evaluation(
            self,
            strategy_nr: int = 1,
            language: str = 'en'
    ) -> None:
        """
        Evaluates the sentiment predictions retrieved for the given language.

        Parameters
        ----------
        strategy_nr : int
            The number of the prompt engineering strategy to activate.

        language : str
            The language whose sentiment predictions are to be evaluated.

        """

        wf = EvaluationWorkflow(strategy_nr)
        wf.evaluate_language(language)

    def _overall_evaluation(
            self,
            strategy_nr: int = 1
    ) -> None:

        wf = EvaluationWorkflow(strategy_nr)
        wf.ev

    def _prompt_optimization(
            self,
            strategy_nr: int = 1,
            language: str = 'en'
    ) -> None:
        """
        Identifies optimization potential in the evaluated prompts.

        Identifies optimization potential in the prompts generated by the
        specified prompt engineering strategy and evaluated after sentiment
        retrieval for the specified language.

        Parameters
        ----------
        strategy_nr : int
            The number of the prompt engineering strategy whose prompts are
            to be optimized.

        language : str
            The language whose prompts are to be optimized.

        """

        self.config.set('version', str(strategy_nr).zfill(2))

        wf = OptimizationWorkflow(strategy_nr)
        wf.find_optimization_potential_for_language(language)

    def _prompt_group_evaluation(self, strategy_nr, prompt_group, language):

        wf = EvaluationWorkflow(strategy_nr)
        wf.evaluate_prompt_group(prompt_group, language)

    # endregion --- Protected Methods

